.synopsis {
  color: #7e8184; /* Light gray */
  font-style: italic;
}
.synopsis em {
  font-style: normal;
}
.button:link,
.button:visited {
  display: block; /* because  <a> is inline use block */
  text-decoration: none; /* Add this */
  color: #fff;
  background-color: #5995da; /* Blue */
  font-weight: bold;
  padding: 20px;
  text-align: center;
  border: 2px solid #5d6063; /* Dark gray */
  border-radius: 5px;

  width: 200px;
  margin: 20px auto;
}

.button:hover,
.button:visited:hover {
  color: #fff;
  background-color: #76aeed; /* Light blue */
}

.button:active,
.button:visited:active {
  color: #fff;
  background-color: #5995da; /* Blue */
}

.page {
  width: 600px;
  margin: 0 auto;
}

.call-to-action:link,
.call-to-action:visited {
  font-style: italic;
  background-color: #eeb75a; /* Yellow */
}
.call-to-action:hover,
.call-to-action:visited:hover {
  background-color: #f5cf8e; /* Light yellow */
}

.call-to-action:active,
.call-to-action:visited:active {
  background-color: #eeb75a; /* Yellow */
}
/* CSS Psudo classes */
/* The classic example is a link. As a web developer, 
you create an <a href> element. After the browser renders
 it, the user can interact with that link. 
 They can hover over it, click it, and visit the URL. */
/* CSS “pseudo-classes” provide a mechanism for hooking
 into this kind of temporary user information. At any 
 given time, an <a href> element can be in a number of 
 different states, and you can use pseudo-classes to 
 style each one of them individually. */
a:link {
  color: blue;
  text-decoration: none;
}
a:visited {
  color: purple;
}
a:hover {
  color: aqua;
  text-decoration: underline;
}
a:active {
  color: red;
}
a:visited:hover {
  color: orange;
}
a:visited:active {
  color: red;
}

/* last-of-type: pseudo-class selects the final element
 of a particular type in its parent element. */
p:last-of-type {
  margin-bottom: 50px;
}

p:first-of-type {
  color: #7e8184;
  font-style: italic;
}

/* pseudo-class’s scope is limited to the parent element. */
/* If you wanted to select only the first <p> in our
 <div class='page'>, you would need to limit its
scope using a child selector, like so: */
.page > p:first-of-type {
  color: #7e8184;
  font-style: italic;
}
/* Id Selector */
#button-2 {
  color: #5d6063; /* Dark gray */
}

/* If we add the following before .call-to-action:active */
/* #button-2 {
    background-color: #D55C5F;
  } */
/* ID selectors have higher specificity than class 
selectors, so this will turn our second button red 
even though we try to set the background-color with
.call-to-action:link later in our stylesheet */
/* It is not always from top to bottom of css */